var documenterSearchIndex = {"docs":
[{"location":"kinematic/#Calculation-of-the-kinematic-model","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"","category":"section"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"Within the kinematic model, the joint positions are primarily calculated, taking into account variable steering angle settings, either to transfer them to the design environment or to utilize them for optimization purposes.","category":"page"},{"location":"kinematic/#Initial-Position-of-the-Steering-System","page":"Calculation of the kinematic model","title":"Initial Position of the Steering System","text":"","category":"section"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"The selection of a suitable reference coordinate system is crucial for defining the initial position of key points. Such a coordinate system should easily integrate predefined lengths, widths, and distances and facilitate the calculation of positioning during rotational movements. A suitable point for this purpose is the intersection point of the rotational axes of the steering geometry. Figure illustrates this coordinate system, with the corresponding axes shown in black. Overall, the figure provides a functional representation of the adjustment capability of the steering geometry, with significant information highlighted through color visualization. For determining the initial position of the key reference points, only those vectors represented by a continuous line should be considered.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"(Image: Figure 3.2: The functional representation of the setting option rotational component)","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"The radius by which the rotational component can rotate around the x-axis lies in the rest position along the z-axis. rest position along the z-axis and is shown in Figure 3.2 as a red continuous vector. As there is no further angle of rotation in the rest position and there is a direct dependence of the position of the radii exists, the radius of rotation is represented by a vector (blue continuous vector) parallel to the x-axis. The coordinates of the vectors can be defined as follows:","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"\\mathbf{r}_{1x} = \\begin{pmatrix} 0 \\ 0 \\ -XSteeringRadius \\end{pmatrix} \\tag{3.1} $","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"\\mathbf{r}_{1z} = \\begin{pmatrix} -ZSteeringRadius \\ 0 \\ 0 \\end{pmatrix} $","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"Taking into account the rotation around the vector r^1_x, the positioning of both joint centers of rotation P_L and P_R (yellow continuous vector) can be determined. By vector addition of the rotation vectors r1x, r1z and taking into accountthe component width b and the joint dimensions d (green continuous vector ) results in the following relationship:","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"p1 = \\mathbf{rx} + \\mathbf{r_z} + \\begin{pmatrix} 0 \\ \\pm(d + (b/2)) \\ 0 \\end{pmatrix} ","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/#Positioning-with-influence-of-the-steering-angle","page":"Calculation of the kinematic model","title":"Positioning with influence of the steering angle","text":"","category":"section"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"Using the reference values of the initial position, the same characteristic points of the rotational component can now be calculated as a function of the steering angle. The first step involves performing an elementary rotation around the x-axis of the coordinate system, with a predefined angle θx. To map the coordinates of a point in a rotated coordinate system, the elementary rotation matrix is applied to the vector:","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"r^{(2)}x = Rx(\\thetax) \\cdot \\mathbf{r}x \\tag{3.2}","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"The coordinates of the mapped vector represent a vector rotated by the angle θx in the original coordinate system. All other starting points of the steering system experience an additional rotational movement in which the component can rotate around the vector r^2_x. To describe this rotation, a further rotation matrix can be applied to the initial positions. This rotation is not described by an elementary rotation around one of the coordinate axes, but is based on the rotation around a position vector n positioned in space.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"Rn(\\thetax) = \\begin{bmatrix} n2^2 \\cdot (1 - \\cos \\thetax) + \\cos(\\thetax) & n1 \\cdot n2 \\cdot (1 - \\cos(\\thetax)) - n3 \\sin(\\thetax) & n1 \\cdot n3 \\cdot (1 - \\cos \\thetax) + n2 \\sin \\thetax \\\nn2 \\cdot n1 \\cdot (1 - \\cos \\thetax) + n3 \\sin \\thetax & (n2^2) \\cdot (1 - \\cos \\thetax) + \\cos \\thetax & n2 \\cdot n3 \\cdot (1 - \\cos \\thetax) - n1 \\sin \\thetax \\\nn3 \\cdot n1 \\cdot (1 - \\cos \\thetax) - n2 \\sin \\thetax & n3 \\cdot n2 \\cdot (1 - \\cos \\thetax) + n1 \\sin \\thetax & (n3^2) \\cdot (1 - \\cos \\thetax) + \\cos \\theta_x \\end{bmatrix} \\tag{3.3}","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"For the positioning of both joint pivot center point vectors p^1:","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"r^{(2)}x = Rx(\\thetax) \\cdot r^{(1)}x \\tag{3.4} $","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"p2 = R{r^{(2)}x} (\\thetax) \\cdot p_1 $","category":"page"},{"location":"kinematic/#Determination-of-the-joint-center-of-rotation-of-the-track-lever","page":"Calculation of the kinematic model","title":"Determination of the joint center of rotation of the track lever","text":"","category":"section"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"To enable comprehensive modeling of the steering, the positions of the outer joint rotation centers are essential. They link the tie rod and the steering components, facilitating the complete integration of the steering kinematic chain. The initial position discussed previously is now expanded by the kinematic chain, as shown in the figure below. The yellow vector represents the tie rod, which pivots around a center on the blue axis of rotation of the wheel carrier. Due to the symmetric properties of the steering geometry at rest, a one-sided representation was chosen for clarity, as an identical procedure applies to the opposite side. In this illustration, the joints are represented by circles, with the red color indicating the sought component.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"(Image: Figure 3.3: The functional representation of the adjustment options for the steering geometry)","category":"page"},{"location":"kinematic/#Definition-of-an-independent-coordinate-system","page":"Calculation of the kinematic model","title":"Definition of an independent coordinate system","text":"","category":"section"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"The joint positions depend on the dynamic movement of the wheel, which is connected through the track lever. The joints move in a circular path around the wheel's axis of rotation. When a steamer is compressed, the wheel suspension's position changes, resulting in an overall displacement of the lever and the required joint center of rotation.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"(Image: Figure 3.4: Consideration of a damped wheel suspension)","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"Figure 3.4 illustrates these relationships, with the initial position in blue and displaced elements in green. The green cylinders represent the wishbone joints, allowing rotation around the dashed axes. Vectors \\mathbf{ and mathbfq^2​ simplify the wishbone positions, ending in joints that form the wheel's axis of rotation (dashed line in Fig. above). Vectors mathbfl^1​ and mathbfl^2​ indicate the steering arms, with center of rotation marked as mathbfM​. The tie rod, shown as a pink dashed line, visualizes the displacement.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"Given these considerations, selecting an independent coordinate system is crucial. This system must account for the kinematic chain of the steering geometry and allow for future modifications. A suitable coordinate system can be positioned at the rear lower wishbone bearing, where the dimensions are known, and the damper's dynamic movement can be integrated. In Figure 3.4, this coordinate system, Q-BKS, is represented with black basis vectors and aligned with the rotational component coordinate system, L-BKS, to facilitate the transfer of coordinates for essential points.","category":"page"},{"location":"kinematic/#Determining-the-centre-of-rotation-of-the-steering-lever","page":"Calculation of the kinematic model","title":"Determining the centre of rotation of the steering lever","text":"","category":"section"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"In order to ascertain the requisite joint position with due consideration of the effects of damped wheel suspension, it is necessary to exclude the influence of the latter. In an ideal scenario, a known point of wheel suspension would be selected, allowing for a straightforward calculation of the requisite position. Some of the points have already been determined through the calculation of the wheel suspension. These include the positions of the joints (depicted as circles in Fig. 3.4), which permit the wheels to rotate. The skilful choice of the Q-BKS allows for the straightforward tracking of these joints, rendering them an optimal reference point. Furthermore, it is established that the centre of rotation of the track lever is situated on the connecting line of both joints, providing a valuable reference for the z-coordinate axis of the reference coordinate system.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"In order to calculate the requisite point, a reference coordinate system D-BKS is positioned in the lower wishbone joint (illustrated by circles in Fig. 3.4), with the direction of the z-axis unit vector coinciding with the axis of rotation of the wheel bracket. Figure 3.5 provides an overview of the orientation and positioning of the coordinate systems defined thus far. In combination with the previous Figure 3.4, it can be seen that the positions are readily comprehensible within the independent coordinate system Q-BKS.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"The centre of rotation of the steering lever is situated at a specific distance, designated as mathbf^Do_M = d, along the z-axis of the D-BKS. It is possible to transform a vector represented in the D-BKS into the Q-BKS by applying the following rotation matrix:","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"\\mathbf{Q}v = \\mathbf{Q}{\\mathbf{R}\\mathbf{D}} \\cdot \\mathbf{D}_v \\tag{3.5} $","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"= \\begin{bmatrix} e{D,x} \\cdot e{Q,x} & e{D,y} \\cdot e{Q,x} & e{D,z} \\cdot e{Q,x} \\\ne{D,x} \\cdot e{Q,y} & e{D,y} \\cdot e{Q,y} & e{D,z} \\cdot e{Q,y} \\\ne{D,x} \\cdot e{Q,z} & e{D,y} \\cdot e{Q,z} & e{D,z} \\cdot e{Q,z} \\\n\\end{bmatrix} \\cdot \\begin{bmatrix} xD \\\nyD \\\nz_D \\\n\\end{bmatrix} \\tag{3.6} $","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"The rotation matrix mathbf^QR_D is constituted by the scalar products of the base vectors of the reference coordinate systems, reflecting their relationship to each other. It is thus necessary to determine the basis vectors of the D-BKS. The connecting vector of the wishbone joint forms the z-axis and can be determined by a simple vector subtraction of the position vectors. The following therefore applies to the unit vector of the z-axis:","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"e{D,z} = \\frac{\\mathbf{^Qo{G1}} - \\mathbf{^Qo{G2}}}{|\\mathbf{^Qo{G1}} - \\mathbf{^Qo{G_2}}|} \\tag{3.7} $","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"The graphical correlation is shown in Figure 3.6.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"(Image: Figure 3.6: Graphical derivation of a base vector of the coordinate system D-BKS)","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"The remaining two base vectors of the coordinate system can be determined through the following procedure. For illustrative purposes, please direct your attention to Figure 3.7, which depicts the individual steps in visual form. By employing the previously determined unit vector of the z-axis and the unit vector along the z-axis of the Q-BKS, an imaginary plane can be constructed (depicted in green in Figure 3.7) with the requisite perpendicularity to the axis being sought. To accomplish this, one must simply form the cross product of the two vectors in order to determine a vertical vector at the intersection of the two base vectors. This process is then repeated with the two previously calculated, known base vectors of the coordinate system.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"e{Q,y} = e{Q,x} \\times e_{D,z} \\tag{3.8} $","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"e{Q,x} = e{Q,x} \\times e_{Q,y}  \\tag{3.9} $","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"(Image: Figure 3.7: Method for determining the basis vectors)","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"Zur endgültigen Bestimmung des Drehpunktes wird dessen Positionsvektor mathbf^Do_M unter Anwendung von Gleichung 3.5 in das Q-BKS eingespeist. Durch eine zusätzliche Vektoraddition mit dem Positionsvektor des Ursprungs der D-BKS mathbf^QR_D ist nun die Lage des Drehpunktes M_L innerhalb der Q-BKS bekannt.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"\\mathbf{^Qo{M}} = \\mathbf{^QR{D}} \\cdot \\mathbf{^Do{M}} + \\mathbf{^Qo{G_1}} \\tag{3.10}","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/#Calculation-of-the-joint-position","page":"Calculation of the kinematic model","title":"Calculation of the joint position","text":"","category":"section"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"The preceding steps are essential preliminary procedures that facilitate the calculation of the final, missing component. In conclusion, the L-component was initially modelled by calculating the most significant points within its reference coordinate system. Given the dynamic properties of the wheel suspension and the uncertainty surrounding the influence of subsequent dimensioning on the L-BKS, an independent coordinate system was defined. This Q-BKS enables the tracing of both the position of the L-BKS and the movement of the control arms. In order to calculate the missing joint in an efficient manner, the D-BKS was defined. This involved calculating the centre of rotation of the steering lever and then transforming it into the independent coordinate system. The objective is to combine the two systems, namely the L-BKS and the D-BKS, into a coherent kinematic system with the aim of determining the joint position.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"A comprehensive examination of the kinematic system reveals the existence of two additional components whose influence has not yet been incorporated into the existing calculations. Firstly, the rotation of the track lever, whose centre point has been determined thus far, and secondly, the tie rod, which connects both systems and translates the movement of the L-component to the wheel. In the absence of a connection to the track lever, the tie rod is capable of moving freely around the centre of the joint on the L-component, thereby forming a sphere of potential alignments. If the circular path of the track lever intersects the sphere of the tie rod, this describes the exact position of the joint on the track lever. The maximum number of intersection points that can be determined is limited to two possible positions of the joint, one of which must be selected. Figure 3.8 illustrates the relationship in which the component dimensioning enables two intersection points.","category":"page"},{"location":"kinematic/#Selection-criterion-for-joint-positions","page":"Calculation of the kinematic model","title":"Selection criterion for joint positions","text":"","category":"section"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"In the preceding section, two potential positionings were identified; a criterion must therefore be formulated to select between them. To this end, the x coordinates of vectors mathbfl^1​ and mathbfl^2​are compared, as illustrated in Figure 3.8. Within the Q reference coordinate system, it is verified whether the x-coordinate of vector mathbfl^2​ is genuinely smaller than that of vector mathbfl^1​.","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"x{^Qo{L2}} - x{^QoM} < x{^Qo{L1}} -x{^QoM} \\tag{3.11} $","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"$","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"x{l2} < x{l1} \\tag{3.12} $","category":"page"},{"location":"kinematic/","page":"Calculation of the kinematic model","title":"Calculation of the kinematic model","text":"(Image: Figure 3.8: Visualisation of the intersection points between the sphere and the circular path )","category":"page"},{"location":"library/#micromobilitykinematics.jl-Library-Functions","page":"Function Library","title":"micromobilitykinematics.jl Library Functions","text":"","category":"section"},{"location":"library/","page":"Function Library","title":"Function Library","text":"This section outlines the library's functions along with their doc strings, enabling users to understand and leverage the capabilities of each function effectively.","category":"page"},{"location":"library/#User-level","page":"Function Library","title":"User level","text":"","category":"section"},{"location":"library/","page":"Function Library","title":"Function Library","text":"The User Level functions offer an intuitive interface tailored for non-expert users. These functions simplify complex kinematic computations and visualizations, making the library accessible for practical applications in micromobility design, simulation, and optimization. By organizing functions into categories such as core calculations, plotting, and data export, this section helps users quickly locate the tools they need.","category":"page"},{"location":"library/#core-functions","page":"Function Library","title":"core functions","text":"","category":"section"},{"location":"library/","page":"Function Library","title":"Function Library","text":"The core functions in the micromobilitykinematics.jl library form the foundation for kinematic calculations and updates. They include functions for computing steering and suspension kinematics in both neutral and moved states. Additionally, the library provides angleδi and angleδo functions to calculate the steering angles of the inner and outer wheels, respectively. Together, these tools offer a robust framework for analyzing and simulating mechanical systems.","category":"page"},{"location":"library/","page":"Function Library","title":"Function Library","text":"random_search\nsteeringkinematics!\nsteeringkinematics\nsteeringkinematicsNEUTRAL!\nsteeringkinematicsMOVED!\nsuspensionkinematics!\nsuspensionkinematicsNEUTRAL!\nsuspensionkinematicsMOVED!\nupdate!\nangle_δi!\nangle_δi\nangle_δo!\nangle_δo","category":"page"},{"location":"library/#micromobilitykinematics.random_search","page":"Function Library","title":"micromobilitykinematics.random_search","text":"random_search(upper_border::Tuple{Float64, Float64, Float64, Float64},lower_border::Tuple{Float64, Float64, Float64, Float64},max_angleConfig; info = false, radius = 3500, step_size = 1 )\n\nrandom search with given border for the parameters and given angular area for rotary component \n\n#Arguments: -upper_border::Tuple{Float64, Float64, Float64, Float64}: upper border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length)  (guidline = (100.0, 140.0,150.0,270.0)) -lower_border::Tuple{Float64, Float64, Float64, Float64}: lower border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length) (guidline = (50.0,100.0, 100.0, 100.0)) -max_angleConfig: maximal angular area for rotary component (defult: (0,35))\n\n#Keywords:\n\n-info::Bool: true if info should be printed -radius: desired track circle radius (defult: 3500) -step_size: step_size in which the angular area should be checked\n\n#Returns: -compLength: tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length)\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.steeringkinematics!","page":"Function Library","title":"micromobilitykinematics.steeringkinematics!","text":"steeringkinematics!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nTo fully describe the kinematics of the steering system, both MOVED and NEUTRAL states must be calculated\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.steeringkinematics","page":"Function Library","title":"micromobilitykinematics.steeringkinematics","text":"steeringkinematics(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nTo fully describe the kinematics of the steering system, both MOVED and NEUTRAL states must be calculated\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\n\"steering::Steering\": Instance of a steering\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.steeringkinematicsNEUTRAL!","page":"Function Library","title":"micromobilitykinematics.steeringkinematicsNEUTRAL!","text":"steeringkinematicsNEUTRAL!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nFor the rotation component in its rest position with the angles (θx, θz) = (0,0), the kinematics of the steering is calculated\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.steeringkinematicsMOVED!","page":"Function Library","title":"micromobilitykinematics.steeringkinematicsMOVED!","text":"steeringkinematicsMOVED!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nFor the moving rotational component with the angles (θx, θz), the kinematics of the steering is calculated\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.suspensionkinematics!","page":"Function Library","title":"micromobilitykinematics.suspensionkinematics!","text":"suspensionkinematics!(suspension::Suspension)\n\nsuspensionkinematicsNEUTRAL!(suspension::Suspension)\n\ncalculates all the movement-dependent positions of the joints in NEUTRAL- and MOVED-Postion\n\n#Arguments: -suspension::Suspension: Suspension of the micromobility vehicle\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.suspensionkinematicsNEUTRAL!","page":"Function Library","title":"micromobilitykinematics.suspensionkinematicsNEUTRAL!","text":"suspensionkinematicsNEUTRAL!(suspension::Suspension)\n\ncalculates all the movement-dependent positions of the joints in NEUTRAL-Position\n\n#Arguemnts: -suspension::Suspension: Suspension of the micromobility vehicle\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.suspensionkinematicsMOVED!","page":"Function Library","title":"micromobilitykinematics.suspensionkinematicsMOVED!","text":"suspensionkinematicsMOVED!(suspension::Suspension)\n\ncalculates all the movement-dependent positions of the joints in MOVED-Position\n\n#Arguments: -suspension::Suspension: Suspension of the micromobility vehicle\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.update!","page":"Function Library","title":"micromobilitykinematics.update!","text":"update!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nupdates the kinematics of the given steering instance on the new angles and suspension\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.angle_δi!","page":"Function Library","title":"micromobilitykinematics.angle_δi!","text":"angle_δi!(steering::Steering)\n\ncalculates the inner steering angle of the wheel !only possible after using function kinematics!\n\n#Arguments -steering::Steering: Instance of a specific steering\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.angle_δi","page":"Function Library","title":"micromobilitykinematics.angle_δi","text":"angle_δi(steering::Steering)\n\ncalculates the inner steering angle of the wheel !only possible after using function kinematics!\n\n#Arguments -steering::Steering: Instance of a specific steering\n\n#Returns  -δ: inner steering angle  of the wheel \n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.angle_δo!","page":"Function Library","title":"micromobilitykinematics.angle_δo!","text":"angle_δo!(steering::Steering)\n\ncalculates the outer steering angle of the wheel !only possible after using function kinematics!\n\n#Arguments -steering::Steering: Instance of a specific steering\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.angle_δo","page":"Function Library","title":"micromobilitykinematics.angle_δo","text":"angle_δo(steering::Steering)\n\ncalculates the outer steering angle of the wheel !only possible after using function kinematics!\n\n#Arguments -steering::Steering: Instance of a specific steering\n\n#Returns  -δ: inner steering angle  of the wheel \n\n\n\n\n\n","category":"function"},{"location":"library/#Optimization","page":"Function Library","title":"Optimization","text":"","category":"section"},{"location":"library/","page":"Function Library","title":"Function Library","text":"The Optimization functions in the micromobilitykinematics.jl library are designed to help users optimize various parameters related to micromobility vehicle steering kinematics. These functions include tools for performing series optimizations (optimseries), grid-based optimization searches (gridoptim), and objective calculations (steering_objective, objective°). Additionally, checkConstraints and checkConstraints° ensure that optimization results satisfy necessary system constraints.","category":"page"},{"location":"library/","page":"Function Library","title":"Function Library","text":"optim_series\noptim\ngrid_optim\ncheckConstraints\ncheckConstraints°\nsteering_objective\nobjective°","category":"page"},{"location":"library/#micromobilitykinematics.optim_series","page":"Function Library","title":"micromobilitykinematics.optim_series","text":"n_times_parallel_optim(num::Int64, θ::Tuple{T,T},upper_border::Tuple{Float64, Float64, Float64, Float64},lower_border::Tuple{Float64, Float64, Float64, Float64},max_angleConfig)\n\nExecutes an optimisation 'n' times in parallel using threads.\n\n!(saves Dict in folder)\n\n#Arguments: -θ::Tuple{T,T}: angle pair to be considered -upper_border::Tuple{Float64, Float64, Float64, Float64}: upper border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length)  (guidline = (100.0, 140.0,150.0,270.0)) -lower_border::Tuple{Float64, Float64, Float64, Float64}: lower border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length) (guidline = (50.0,100.0, 100.0, 100.0)) -max_angleConfig: maximal angular area for rotary component (default: (0,35))\n\n#Returns: -sol_dict: Dict which contains the optimal solutions.\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.optim","page":"Function Library","title":"micromobilitykinematics.optim","text":"optim(θ::Tuple{T,T},upper_border::Tuple{Float64, Float64, Float64, Float64},lower_border::Tuple{Float64, Float64, Float64, Float64},max_angleConfig)\n\n#Arguments: -θ::Tuple{T,T}: angle pair to be considered -upper_border::Tuple{Float64, Float64, Float64, Float64}: upper border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length)  (guidline = (100.0, 140.0,150.0,270.0)) -lower_border::Tuple{Float64, Float64, Float64, Float64}: lower border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length) (guidline = (50.0,100.0, 100.0, 100.0)) -max_angleConfig: maximal angular area for rotary component (default: (0,35))\n\n#Keywords -param::Tuple{I,I,I,I}: If necessary, the components can be initialised individually, otherwise the values are randomised by the function that was checked for kinematic conditions.\n\n#Returns: -opda: instance of OptDa (optimization Data)\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.grid_optim","page":"Function Library","title":"micromobilitykinematics.grid_optim","text":"grid_optim(upper_border::Tuple{Float64, Float64, Float64, Float64},lower_border::Tuple{Float64, Float64, Float64, Float64}, max_angleConfig::Tuple{I,I}) where {I::Int64}\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.checkConstraints","page":"Function Library","title":"micromobilitykinematics.checkConstraints","text":"checkConstraints(stepsize, maxangleConfig::Tuple, steering::Steering, suspension::Suspension)\n\nchecks  all constraints and dependencies\n\n#Arguments  -step_size: step_size in which the angular area should be checked -maxangleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: maximal Angle of rotation of the rotation component around the x-axis         -θz: maximal Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns: -::Bool:         -false: It is not possible to match the constraints in a satisfactory manner         -true: It is possible to match the constraints in a satisfactory manner\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.checkConstraints°","page":"Function Library","title":"micromobilitykinematics.checkConstraints°","text":"checkConstraints°(x_rotational_radius, z_rotational_radius, track_lever_length, tie_rod_length)\n\nThe wrapper function of the checkConstraints procedure is employed for the purposes of optimisation. ! function°(): symbolises that this function should only be used within the optimisation !\n\n#Arguments -x_rotational_radius: Length of the rotational component around the x-axis. (detailed info in doc) -z_rotational_radius: Length of the rotational component around the z-axis. (detailed info in doc) -track_lever_length: Length of the track lever. (detailed info in doc) -tie_rod_length: Length of tie rod. (detailed info in doc)\n\n#Returns -binary:         -0: It is not possible to match the constraints in a satisfactory manner.         -1: It is possible to match the constraints in a satisfactory manner.\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.steering_objective","page":"Function Library","title":"micromobilitykinematics.steering_objective","text":"steering_objective(angleConfig::Tuple{T,T}, measurements::Measurements, steering::Steering, suspension::Suspension)\n\nCalculates the distance between the optimum point of intersection of the wheel axis (normally on the rear wheel axis) and the current point of intersection of the axis.\n\n#Arguments\n-`angleConfig::Tuple{T,T}`: angles (θx,θz) in which the rotational component is rotated\n    -`θx`: Angle of rotation of the rotation component around the x-axis\n    -`θz`: Angle of rotation of the rotation component around the z-axis\n-`measurements::Measurements`: Instance of a specific all relevant Measurements of the vehicle\n-`steering::Steering`: Instance of a specific steering\n-`suspension::Suspension`: Instance of a specific suspension\n\n#Returns\n- Distance between optimal and current intersection point\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.objective°","page":"Function Library","title":"micromobilitykinematics.objective°","text":"objective°(θx, θz, x_rotational_radius, z_rotational_radius, track_lever_length, tie_rod_length)\n\nThe wrapper function of the steering_objective procedure is employed for the purposes of optimisation. ! function°(): symbolises that this function should only be used within the optimisation !\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated     -θx: Angle of rotation of the rotation component around the x-axis     -θz: Angle of rotation of the rotation component around the z-axis -measurements::Measurements: Instance of a specific all relevant Measurements of the vehicle -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns\n\nDistance between optimal and current intersection point\n\n\n\n\n\n","category":"function"},{"location":"library/#Plots","page":"Function Library","title":"Plots","text":"","category":"section"},{"location":"library/","page":"Function Library","title":"Function Library","text":"The plotting functions allow users to visualize data and results related to kinematic and optimization studies. With plotoptdaseries, users can generate time-series visualizations of performance metrics. Meanwhile, plotoptdagirdδ and plotoptdagirdobj provide intuitive grid-based plots for steering angle relationships and optimization objectives, respectively. These tools facilitate deeper insights and a more intuitive understanding of complex data","category":"page"},{"location":"library/","page":"Function Library","title":"Function Library","text":"plot_optda_series\nplot_optda_gird_δ\nplot_optda_gird_obj\n","category":"page"},{"location":"library/#micromobilitykinematics.plot_optda_series","page":"Function Library","title":"micromobilitykinematics.plot_optda_series","text":"plot_optda_series(optda_dict::Dict{Int64,Any})\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.plot_optda_gird_δ","page":"Function Library","title":"micromobilitykinematics.plot_optda_gird_δ","text":"plot_optda_gird_δi(θ_max::Tuple{I,I}, steering::Steering) where {T <: Any}\n\nCreate a plot in which the turning angles of the vehicle are mapped to the turning angles of the rotation component (θx, θz) of the steering system.\n\n#Arguments -θ_max::Tuple{I,I}: maximal turning angles of the rotation component -steering::Steering: Instance of a specific steering mechanism in which the kinematics were previously calculated.\n\n#Returns\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.plot_optda_gird_obj","page":"Function Library","title":"micromobilitykinematics.plot_optda_gird_obj","text":"plot_optda_gird_obj(θ_max::Tuple{I,I}, steering::Steering, suspension::Suspension, chassi::Chassis) where {I <: Any}\n\nCreate a plot in which the objective (Ackermann ratio) are mapped to the turning angles of the rotation component (θx, θz) of the steering system.   \n\n#Arguments -θ_max::Tuple{I,I}: maximal turning angles of the rotation component -steering::Steering: Instance of a specific steering mechanism in which the kinematics were previously calculated. -suspension::Suspension: Instance of a specific suspension in which the kinematics were previously calculated. -chassi::Chassis: Instance of a Chassis\n\n#Returns\n\n\n\n\n\n","category":"function"},{"location":"library/#Export","page":"Function Library","title":"Export","text":"","category":"section"},{"location":"library/","page":"Function Library","title":"Function Library","text":"The export function exportXML enables users to efficiently save and share their configurations in an XML format. This functionality is particularly useful for integrating results into other software workflows or for long-term archiving, ensuring compatibility and traceability across platforms and projects.","category":"page"},{"location":"library/","page":"Function Library","title":"Function Library","text":"exportXML","category":"page"},{"location":"library/#micromobilitykinematics.exportXML","page":"Function Library","title":"micromobilitykinematics.exportXML","text":"exportXML(inst::Union{Steering, Suspension}; file_name=\"SteeringParamList\", path=@__DIR__ )\n\nAll important steering/suspension kinematics parameters are transferred to an XML file.\n\n#Arguemnts -inst::Union{Steering, Suspension}: Instance of a steering/suspension/... where the kinematic! function has already been used.\n\n#Keywords -path=@__DIR__: Path to the folder where the xml file will be saved.\n\n\n\n\n\n","category":"function"},{"location":"library/#All-Functions","page":"Function Library","title":"All Functions","text":"","category":"section"},{"location":"library/","page":"Function Library","title":"Function Library","text":"Modules = [micromobilitykinematics]\n","category":"page"},{"location":"library/#micromobilitykinematics.AngleDependency-Tuple","page":"Function Library","title":"micromobilitykinematics.AngleDependency","text":"AngleDependency(steering::Steering)\n\nchecks angle dependency\n\n#Arguments \n\nsteering::Steering: Instance of a specific steering\n\n#Returns: -::Bool\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.EulerRotationAngles-NTuple{7, Any}","page":"Function Library","title":"micromobilitykinematics.EulerRotationAngles","text":"EulerRotationAngles(u1,v1,w1,u2,v2,w2,sequence)\n\ncalculates the Euler angles of rotation\n\nArguments\n\nu1: base vector Coordinate System 1\nv1: base vector Coordinate System 1\nw1: base vector Coordinate System 1\nu2: base vector Coordinate System 2\nv2: base vector Coordinate System 2\nw2: base vector Coordinate System 2\nsequence: vector as a sequence of (x,y,z) to be rotated from System 1 to System 2\n\nReturns\n\nalpha, beta, gamma: Rotation angles\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.KinematicDependency-Tuple","page":"Function Library","title":"micromobilitykinematics.KinematicDependency","text":"KinematicDependency(steering::Steering)\n\nchecks kinematic dependency\n\n#Arguments -steering::Steering: Instance of a specific steering\n\n#Returns: -::Bool\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.SingularityConstraint-Tuple","page":"Function Library","title":"micromobilitykinematics.SingularityConstraint","text":"SingularityConstraint(steering::Steering, suspension::Suspension)\n\nchecks singularity constraints\n\n#Arguments\n\nsteering::Steering: Instance of a specific steering\nsuspension::Suspension: Instance of a specific suspension\n\n#Returns: -::Bool\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.TrackingCircleConstraint-Tuple","page":"Function Library","title":"micromobilitykinematics.TrackingCircleConstraint","text":"TrackingcircleConstraint(steering::Steering, measurements::Measurements)\n\nchecks tracking circle constraint\n\n#Arguments -steering::Steering: Instance of a specific steering -measurements::Measurements: Instance of a specific all relevant Measurements of the vehicle\n\n#Returns: -::Bool\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.angle_dependency-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.angle_dependency","text":"angle_dependency(steering_now::Steering)\n\ncalculates the Difference of the front wheels steering angles. !The inner steering angle should always be bigger then the outer!\n\n!Instead of calling the kinematics in all conditions, the approach taken here is to use the properties of instantiation! !marked with a  at the beginning ! #Arguments\n\nsteering_now::Steering: the current state of the steering kinematics\n\n#Returns\n\nDifference between the current turning angles of the front wheels\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.angle_δi!-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.angle_δi!","text":"angle_δi!(steering::Steering)\n\ncalculates the inner steering angle of the wheel !only possible after using function kinematics!\n\n#Arguments -steering::Steering: Instance of a specific steering\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.angle_δi-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.angle_δi","text":"angle_δi(steering::Steering)\n\ncalculates the inner steering angle of the wheel !only possible after using function kinematics!\n\n#Arguments -steering::Steering: Instance of a specific steering\n\n#Returns  -δ: inner steering angle  of the wheel \n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.angle_δo!-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.angle_δo!","text":"angle_δo!(steering::Steering)\n\ncalculates the outer steering angle of the wheel !only possible after using function kinematics!\n\n#Arguments -steering::Steering: Instance of a specific steering\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.angle_δo-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.angle_δo","text":"angle_δo(steering::Steering)\n\ncalculates the outer steering angle of the wheel !only possible after using function kinematics!\n\n#Arguments -steering::Steering: Instance of a specific steering\n\n#Returns  -δ: inner steering angle  of the wheel \n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.applyMatrixRotation-Tuple{AbstractVector, Matrix, Matrix}","page":"Function Library","title":"micromobilitykinematics.applyMatrixRotation","text":"applyMatrixRotation(vec::SVector{3,T}, basis1::Matrix{T}, basis2::Matrix{T}) where {T}\n\nperforms a rotation of a vector vec using two sets of three orthogonal unit vectors basis1 and basis2.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.checkConstraints-Tuple{Any, Tuple, micromobilitykinematics.Steering, micromobilitykinematics.Suspension}","page":"Function Library","title":"micromobilitykinematics.checkConstraints","text":"checkConstraints(stepsize, maxangleConfig::Tuple, steering::Steering, suspension::Suspension)\n\nchecks  all constraints and dependencies\n\n#Arguments  -step_size: step_size in which the angular area should be checked -maxangleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: maximal Angle of rotation of the rotation component around the x-axis         -θz: maximal Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns: -::Bool:         -false: It is not possible to match the constraints in a satisfactory manner         -true: It is possible to match the constraints in a satisfactory manner\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.checkConstraints°-NTuple{4, Any}","page":"Function Library","title":"micromobilitykinematics.checkConstraints°","text":"checkConstraints°(x_rotational_radius, z_rotational_radius, track_lever_length, tie_rod_length)\n\nThe wrapper function of the checkConstraints procedure is employed for the purposes of optimisation. ! function°(): symbolises that this function should only be used within the optimisation !\n\n#Arguments -x_rotational_radius: Length of the rotational component around the x-axis. (detailed info in doc) -z_rotational_radius: Length of the rotational component around the z-axis. (detailed info in doc) -track_lever_length: Length of the track lever. (detailed info in doc) -tie_rod_length: Length of tie rod. (detailed info in doc)\n\n#Returns -binary:         -0: It is not possible to match the constraints in a satisfactory manner.         -1: It is possible to match the constraints in a satisfactory manner.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.copy-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.copy","text":"copy(steering::Steering)\n\ncreates a copy of the steering instance\n\n#Arguments: -steering::Steering: instance of a Steering\n\n#Returns: -copy::Steering: copy of the given instance \n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.create_model-Union{Tuple{T}, Tuple{Tuple{T, T}, micromobilitykinematics.Steering}} where T<:Number","page":"Function Library","title":"micromobilitykinematics.create_model","text":"createspheremodel(θ::Tuple{T,T})\n\ncreates model for optimization with sphere dependencies\n\n#Arguments -θ::Tuple{T,T}: tuple of Angles (θx, θz) -start_set: Parameter start values [\"xrotationalradius\";\"zrotationalradius\";\"trackleverlength\";\"tierodlength\"]\n\n#Returns: -model: returns a jump model\n\nSee Also\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.exportXML-Tuple{Union{micromobilitykinematics.Steering, micromobilitykinematics.Suspension}}","page":"Function Library","title":"micromobilitykinematics.exportXML","text":"exportXML(inst::Union{Steering, Suspension}; file_name=\"SteeringParamList\", path=@__DIR__ )\n\nAll important steering/suspension kinematics parameters are transferred to an XML file.\n\n#Arguemnts -inst::Union{Steering, Suspension}: Instance of a steering/suspension/... where the kinematic! function has already been used.\n\n#Keywords -path=@__DIR__: Path to the folder where the xml file will be saved.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.getValue-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.getValue","text":"getValue(steering::Steering)\n\nReturns important length values of steering components\n\n#Arguments -steering::Steering:  Instance of a specific steering\n\n#Returns -(x_rotational_radius, z_rotational_radius, track_lever_length, tie_rod_length): important length values of steering components \n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.get_insights-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.get_insights","text":"get_insights(steering::Steering)\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.get_model_solution-Tuple{Any}","page":"Function Library","title":"micromobilitykinematics.get_model_solution","text":"get_model_solution(model)\n\ngets the importend informations of the model solution\n\n#Arguments: -model: jump model\n\n#Returns: -objectiv: value of the final objective\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.grid_data_obj-Tuple{Tuple{Any, Any}, micromobilitykinematics.Steering, micromobilitykinematics.Suspension, micromobilitykinematics.Chassis}","page":"Function Library","title":"micromobilitykinematics.grid_data_obj","text":"grid_data_obj(θ_max::Tuple{I,I}, steering::Steering, suspension::Suspension, chassi::Chassis; step_size = 1) where {I <: Any}\n\ncalculates the objective of the given \n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.grid_data_δ-Tuple{Tuple{Any, Any}, micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.grid_data_δ","text":"grid_data_δ(θ_max::Tuple{I,I}, steering::Steering; step_size = 1) where {I <: Any}\n\nCalculates the turning angles of the vehicle for each turning angles of the rotation component (θx, θz) of the steering system.\n\n#Arguments -θ_max::Tuple{I,I}: maximal turning angles of the rotation component -steering::Steering: Instance of a specific steering mechanism in which the kinematics were previously calculated.\n\n#Keywords -step_size: The step size of the grid\n\n#Retruns -δi, δo: Tuple of turning angles Matrix \n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.grid_optim-Union{Tuple{T}, Tuple{NTuple{4, T}, NTuple{4, T}, Any}} where T<:Number","page":"Function Library","title":"micromobilitykinematics.grid_optim","text":"grid_optim(upper_border::Tuple{Float64, Float64, Float64, Float64},lower_border::Tuple{Float64, Float64, Float64, Float64}, max_angleConfig::Tuple{I,I}) where {I::Int64}\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.handle_instance-Union{Tuple{D}, Tuple{T}, Tuple{LightXML.XMLElement, Union{T, D}}} where {T<:micromobilitykinematics.AbstractSteering, D<:micromobilitykinematics.AbstractSuspension}","page":"Function Library","title":"micromobilitykinematics.handle_instance","text":"handle_instance(child::XMLElement, inst::Union{T,D}) where {T<:AbstractSteering, D <:AbstractSuspension}\n\nThe inheritance tree of the instance is followed until each parameter of the instance is included in the XML file, thus ensuring that all relevant information is conveyed within the file.\n\n#Arguments  -child::XMLElement: Child to which the properties should be added in XML.  -inst::Union{<:AbstractSteering,<:AbstractSuspension}: instance that is viewed\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.handle_single-Union{Tuple{D}, Tuple{T}, Tuple{LightXML.XMLElement, Symbol, Union{T, D}}} where {T<:micromobilitykinematics.AbstractSteering, D<:micromobilitykinematics.AbstractSuspension}","page":"Function Library","title":"micromobilitykinematics.handle_single","text":"handle_single(child::XMLElement, field::Symbol, inst::Union{T,D}) where {T<:AbstractSteering, D <:AbstractSuspension}\n\nSingle values that exist in the core.jl module are transferred to the XML file.\n\n#Arguments  -child::XMLElement: Child to which the properties should be added in XML.  -field::Symbol: the current parameter of the instance being discussed  -inst::Union{<:AbstractSteering,<:AbstractSuspension}: instance that is viewed\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.handle_tuple-Union{Tuple{D}, Tuple{T}, Tuple{LightXML.XMLElement, Symbol, Union{T, D}}} where {T<:micromobilitykinematics.AbstractSteering, D<:micromobilitykinematics.AbstractSuspension}","page":"Function Library","title":"micromobilitykinematics.handle_tuple","text":"handle_tuple(child::XMLElement, field::Symbol, inst::Union{T,D}) where {T<:AbstractSteering, D <:AbstractSuspension}\n\nTuples that exist in the core.jl module are transferred to the XML file.\n\n#Arguments  -child::XMLElement: Child to which the properties should be added in XML.  -field::Symbol: the current parameter of the instance being discussed  -inst::Union{<:AbstractSteering,<:AbstractSuspension}: instance that is viewed\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.handle_vector-Union{Tuple{D}, Tuple{T}, Tuple{LightXML.XMLElement, Symbol, Union{T, D}}} where {T<:micromobilitykinematics.AbstractSteering, D<:micromobilitykinematics.AbstractSuspension}","page":"Function Library","title":"micromobilitykinematics.handle_vector","text":"handle_vector(child::XMLElement, field::Symbol, inst::Union{T,D}) where {T<:AbstractSteering, D <:AbstractSuspension}\n\nVectors that exist in the core.jl module are transferred to the XML file.\n\n#Arguments  -child::XMLElement: Child to which the properties should be added in XML.  -field::Symbol: the current parameter of the instance being discussed  -inst::Union{<:AbstractSteering,<:AbstractSuspension}: instance that is viewed\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.inner_singularity_constraint-Tuple{micromobilitykinematics.Steering, micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.inner_singularity_constraint","text":"inner_singularity_constraint(steering_now::Steering, steering_next::Steering)\n\ncalculates the angle change of two sequential steps of the right front wheel. The result of the subtraction should always be negativ.\n\n!Instead of calling the kinematics in all conditions, the approach taken here is to use the properties of instantiation! !marked with a  at the beginning ! #Arguments\n\nsteering_now::Steering: the current state of the steering kinematics\nsteering_next::Steering: The state of the steering kinematics when the rotating part of the steering is rotated about θz+1.\n\n#Returns:\n\nDifference between the current inner turning angle of the wheel and the next step\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.kinematicsASOFmountMOVED°!-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.kinematicsASOFmountMOVED°!","text":"kinematicsASOFmount°!(steering::Steering)\n\nFor the moving rotational component with angles (θx, θz) and the neutral position of the rotational component, the steering kinematics are calculated as of track_lever_mounting_points_ucs.  ! function°(): symbolises that this function should only be used within the optimisation ! ! function kinematicsUNTILmountMOVED°! should already be used on the steering instance !\n\n#Arguments -steering::Steering: Instance of a specific steering where the function was previously called\n\n#Returns:\n\nNo return value due to in-place computation.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.kinematicsASOFmountNEUTRAL°!-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.kinematicsASOFmountNEUTRAL°!","text":"kinematicsASOFmountNEUTRAL°!(steering::Steering)\n\nfor the moving rotational component with the angles (θx, θz), the kinematics of the steering is calculated as of track_lever_mounting_points_ucs  ! function°(): symbolises that this function should only be used within the optimisation ! ! function kinematicsUNTILmountMOVED°! should already be used on the steering instance !\n\n#Arguments -steering::Steering: Instance of a specific steering where the function kinematicsUNTILmount°! was previously called\n\n#Returns:\n\nNo return value due to in-place computation.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.kinematicsASOFmount°!-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.kinematicsASOFmount°!","text":"kinematicsASOFmount°!(steering::Steering)\n\nFor the moving rotational component with angles (θx, θz) and the neutral position of the rotational component, the steering kinematics are calculated from track_lever_mounting_points_ucs.  ! function°(): symbolises that this function should only be used within the optimisation ! ! function kinematicsUNTILmountMOVED°! should already be used on the steering instance !\n\n#Arguments -steering::Steering: Instance of a specific steering where the function kinematicsUNTILmount°! was previously called\n\n#Returns:\n\nNo return value due to in-place computation.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.kinematicsUNTILmountMOVED°!-Union{Tuple{T}, Tuple{Tuple{T, T}, micromobilitykinematics.Steering, micromobilitykinematics.Suspension}} where T","page":"Function Library","title":"micromobilitykinematics.kinematicsUNTILmountMOVED°!","text":"kinematicsUNTILmountMOVED°!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nFor the moving rotational component with the angles (θx, θz), the kinematics of the steering is calculated until track_lever_mounting_points_ucs  ! function°(): symbolises that this function should only be used within the optimisation !\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\nNo return value due to in-place computation.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.kinematicsUNTILmountNEUTRAL°!-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.kinematicsUNTILmountNEUTRAL°!","text":"kinematicsUNTILmountNEUTRAL°!(steering::Steering)\n\nFor the rotation component with the neutral position, the steering kinematics are calculated until 'tracklevermountingpointsucs'.  ! function°(): symbolises that this function should only be used within the optimisation !\n\n#Arguments -steering::Steering: Instance of a specific steering \n\n#Returns:\n\nNo return value due to in-place computation.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.kinematicsUNTILmount°!-Union{Tuple{T}, Tuple{Tuple{T, T}, micromobilitykinematics.Steering, micromobilitykinematics.Suspension}} where T","page":"Function Library","title":"micromobilitykinematics.kinematicsUNTILmount°!","text":"kinematicsUNTILmount°!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nFor the moving rotation component with the angles (θx, θz) and the neutral position of the rotation component, the steering kinematics are calculated until track_lever_mounting_points_ucs.         ! function°(): symbolises that this function should only be used within the optimisation !\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering  -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\nNo return value due to in-place computation.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.kinematicsUNTILmount°-Union{Tuple{T}, Tuple{Tuple{T, T}, micromobilitykinematics.Steering, micromobilitykinematics.Suspension}} where T","page":"Function Library","title":"micromobilitykinematics.kinematicsUNTILmount°","text":"kinematicsUNTILmount°(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nFor the moving rotation component with the angles (θx, θz) and the neutral position of the rotation component, the steering kinematics are calculated until track_lever_mounting_points_ucs.     ! function°(): symbolises that this function should only be used within the optimisation !\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering  -suspension::Suspension: Instance of a specific suspension\n\n#Returns: -steering::Steering: Instance of a steering with calculated kinematics until track_lever_mounting_points_ucs.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.left_circcirc_max_intersection_dependency-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.left_circcirc_max_intersection_dependency","text":"left_circcirc_max_intersection_dependency(steering_now::Steering)\n\ncalculates the Difference of the radius og the circle2 (tie rod) and the total length of the distance of the circ centeres d and the radius of the circle1 (track lever). If the value of the radius of circle2 is bigger then there is no intersect posible. circle1 lies in circle2. (Left side of the kinematic steering mechanism)\n\n!Instead of calling the kinematics in all conditions, the approach taken here is to use the properties of instantiation!\n\n#Arguments\n\nsteering_now::Steering: the current state of the steering kinematics\n\n#Returns\n\ndependency for the maximal interaction between circle and circle of the kinematic\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.left_circsphere_plane_dependency-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.left_circsphere_plane_dependency","text":"left_circsphere_plane_dependency(steering_now::Steering)\n\ncalculates the diffrence between the distance of the centers and the actual radius of the actual range of motion of the tie rod. (Left side of the kinematik steering mechanism)\n\n!Instead of calling the kinematics in all conditions, the approach taken here is to use the properties of instantiation! !marked with a  at the beginning ! #Arguments\n\nsteering_now::Steering: the current state of the steering kinematics\n\n#Returns\n\ndependency for the interaction between circle and sphere of the kinematic\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.load_data","page":"Function Library","title":"micromobilitykinematics.load_data","text":"function load_data(θ::Tuple, path = @__DIR__)\n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.objective°-NTuple{6, Any}","page":"Function Library","title":"micromobilitykinematics.objective°","text":"objective°(θx, θz, x_rotational_radius, z_rotational_radius, track_lever_length, tie_rod_length)\n\nThe wrapper function of the steering_objective procedure is employed for the purposes of optimisation. ! function°(): symbolises that this function should only be used within the optimisation !\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated     -θx: Angle of rotation of the rotation component around the x-axis     -θz: Angle of rotation of the rotation component around the z-axis -measurements::Measurements: Instance of a specific all relevant Measurements of the vehicle -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns\n\nDistance between optimal and current intersection point\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.optim-Union{Tuple{T}, Tuple{Tuple{T, T}, Vararg{Any}}} where T<:Integer","page":"Function Library","title":"micromobilitykinematics.optim","text":"optim(θ::Tuple{T,T},upper_border::Tuple{Float64, Float64, Float64, Float64},lower_border::Tuple{Float64, Float64, Float64, Float64},max_angleConfig)\n\n#Arguments: -θ::Tuple{T,T}: angle pair to be considered -upper_border::Tuple{Float64, Float64, Float64, Float64}: upper border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length)  (guidline = (100.0, 140.0,150.0,270.0)) -lower_border::Tuple{Float64, Float64, Float64, Float64}: lower border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length) (guidline = (50.0,100.0, 100.0, 100.0)) -max_angleConfig: maximal angular area for rotary component (default: (0,35))\n\n#Keywords -param::Tuple{I,I,I,I}: If necessary, the components can be initialised individually, otherwise the values are randomised by the function that was checked for kinematic conditions.\n\n#Returns: -opda: instance of OptDa (optimization Data)\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.optim_series-Tuple{Int64, Vararg{Any}}","page":"Function Library","title":"micromobilitykinematics.optim_series","text":"n_times_parallel_optim(num::Int64, θ::Tuple{T,T},upper_border::Tuple{Float64, Float64, Float64, Float64},lower_border::Tuple{Float64, Float64, Float64, Float64},max_angleConfig)\n\nExecutes an optimisation 'n' times in parallel using threads.\n\n!(saves Dict in folder)\n\n#Arguments: -θ::Tuple{T,T}: angle pair to be considered -upper_border::Tuple{Float64, Float64, Float64, Float64}: upper border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length)  (guidline = (100.0, 140.0,150.0,270.0)) -lower_border::Tuple{Float64, Float64, Float64, Float64}: lower border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length) (guidline = (50.0,100.0, 100.0, 100.0)) -max_angleConfig: maximal angular area for rotary component (default: (0,35))\n\n#Returns: -sol_dict: Dict which contains the optimal solutions.\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.outer_singularity_constraint-Tuple{micromobilitykinematics.Steering, micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.outer_singularity_constraint","text":"outer_singularity_constraint(steering_now::Steering, steering_next::Steering)\n\ncalculates the angle change of two sequential steps of the left front wheel. The result of the subtraction should always be negativ.\n\n!Instead of calling the kinematics in all conditions, the approach taken here is to use the properties of instantiation! !marked with a  at the beginning ! #Arguments\n\nsteering_now::Steering: the current state of the steering kinematics\nsteering_next::Steering: The state of the steering kinematics when the rotating part of the steering is rotated about θz+1.\n\n#Returns:\n\nDifference between the current outer turning angle of the wheel and the next step\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.plot_optda_gird_obj-Tuple","page":"Function Library","title":"micromobilitykinematics.plot_optda_gird_obj","text":"plot_optda_gird_obj(θ_max::Tuple{I,I}, steering::Steering, suspension::Suspension, chassi::Chassis) where {I <: Any}\n\nCreate a plot in which the objective (Ackermann ratio) are mapped to the turning angles of the rotation component (θx, θz) of the steering system.   \n\n#Arguments -θ_max::Tuple{I,I}: maximal turning angles of the rotation component -steering::Steering: Instance of a specific steering mechanism in which the kinematics were previously calculated. -suspension::Suspension: Instance of a specific suspension in which the kinematics were previously calculated. -chassi::Chassis: Instance of a Chassis\n\n#Returns\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.plot_optda_gird_δ-Tuple","page":"Function Library","title":"micromobilitykinematics.plot_optda_gird_δ","text":"plot_optda_gird_δi(θ_max::Tuple{I,I}, steering::Steering) where {T <: Any}\n\nCreate a plot in which the turning angles of the vehicle are mapped to the turning angles of the rotation component (θx, θz) of the steering system.\n\n#Arguments -θ_max::Tuple{I,I}: maximal turning angles of the rotation component -steering::Steering: Instance of a specific steering mechanism in which the kinematics were previously calculated.\n\n#Returns\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.plot_optda_series-Tuple{Dict{Int64, Any}}","page":"Function Library","title":"micromobilitykinematics.plot_optda_series","text":"plot_optda_series(optda_dict::Dict{Int64,Any})\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.random_search-Union{Tuple{I}, Tuple{T}, Tuple{NTuple{4, T}, NTuple{4, T}, Tuple{I, I}}} where {T<:Real, I<:Integer}","page":"Function Library","title":"micromobilitykinematics.random_search","text":"random_search(upper_border::Tuple{Float64, Float64, Float64, Float64},lower_border::Tuple{Float64, Float64, Float64, Float64},max_angleConfig; info = false, radius = 3500, step_size = 1 )\n\nrandom search with given border for the parameters and given angular area for rotary component \n\n#Arguments: -upper_border::Tuple{Float64, Float64, Float64, Float64}: upper border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length)  (guidline = (100.0, 140.0,150.0,270.0)) -lower_border::Tuple{Float64, Float64, Float64, Float64}: lower border Tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length) (guidline = (50.0,100.0, 100.0, 100.0)) -max_angleConfig: maximal angular area for rotary component (defult: (0,35))\n\n#Keywords:\n\n-info::Bool: true if info should be printed -radius: desired track circle radius (defult: 3500) -step_size: step_size in which the angular area should be checked\n\n#Returns: -compLength: tuple (xrotationalradius, zrotationalradius, tracklever.length, tierod.length)\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.right_circcirc_max_intersection_dependency-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.right_circcirc_max_intersection_dependency","text":"left_circcirc_max_intersection_dependency(steering_now::Steering)\n\ncalculates the Difference of the radius og the circle2 (tie rod) and the total length of the distance of the circ centeres d and the radius of the circle1 (track lever). If the value of the radius of circle2 is bigger then there is no intersect posible. circle1 lies in circle2. (Right side of the kinematic steering mechanism)\n\n!Instead of calling the kinematics in all conditions, the approach taken here is to use the properties of instantiation!\n\n#Arguments\n\nsteering_now::Steering: the current state of the steering kinematics\n\n#Returns\n\ndependency for the maximal interaction between circle and circle of the kinematic\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.right_circsphere_plane_dependency-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.right_circsphere_plane_dependency","text":"right_circsphere_plane_dependency(steering_now::Steering)\n\ncalculates the diffrence between the distance of the circ/shere centers and the actual radius of the actual range of motion of the tie rod. (Right side of the kinematic steering mechanism)\n\n!Instead of calling the kinematics in all conditions, the approach taken here is to use the properties of instantiation! !marked with a  at the beginning ! #Arguments\n\nsteering_now::Steering: the current state of the steering kinematics\n\n#Returns\n\ndependency for the interaction between circle and sphere of the kinematic\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.rotate3","page":"Function Library","title":"micromobilitykinematics.rotate3","text":"rotate3(A,n,alpha,shift=[0;0;0])\n\ncalculates the Rotation matrix RM an rotation point R.\n\n#Arguments\n\nA: Point to be rotated\nn: vector around which to rotate\nalpha: the angle to be rotated\nshift=[0;0;0]: used to rotate around axes that are not going through the origin\n\n#Returns -RM: Rotation matrix -R: rotated point \n\n\n\n\n\n","category":"function"},{"location":"library/#micromobilitykinematics.save_best_objective-Tuple{}","page":"Function Library","title":"micromobilitykinematics.save_best_objective","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.save_current_best_objective°-Union{Tuple{T}, Tuple{micromobilitykinematics.Steering, T}} where T<:Number","page":"Function Library","title":"micromobilitykinematics.save_current_best_objective°","text":"save(steering::Steering, objective::T) where {T<:Number}\n\nsaves the current best objective of the optimaization\n\n#Arguments -steering::Steering: Instance of a specific steering -objective: objective value of the current Iteration\n\n#Returns -nothing\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.steering_objective-Union{Tuple{T}, Tuple{Tuple{T, T}, micromobilitykinematics.Chassis, micromobilitykinematics.Steering, micromobilitykinematics.Suspension}} where T","page":"Function Library","title":"micromobilitykinematics.steering_objective","text":"steering_objective(angleConfig::Tuple{T,T}, measurements::Measurements, steering::Steering, suspension::Suspension)\n\nCalculates the distance between the optimum point of intersection of the wheel axis (normally on the rear wheel axis) and the current point of intersection of the axis.\n\n#Arguments\n-`angleConfig::Tuple{T,T}`: angles (θx,θz) in which the rotational component is rotated\n    -`θx`: Angle of rotation of the rotation component around the x-axis\n    -`θz`: Angle of rotation of the rotation component around the z-axis\n-`measurements::Measurements`: Instance of a specific all relevant Measurements of the vehicle\n-`steering::Steering`: Instance of a specific steering\n-`suspension::Suspension`: Instance of a specific suspension\n\n#Returns\n- Distance between optimal and current intersection point\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.steeringkinematics!-Tuple","page":"Function Library","title":"micromobilitykinematics.steeringkinematics!","text":"steeringkinematics!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nTo fully describe the kinematics of the steering system, both MOVED and NEUTRAL states must be calculated\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.steeringkinematics-Union{Tuple{T}, Tuple{Tuple{T, T}, micromobilitykinematics.Steering, micromobilitykinematics.Suspension}} where T","page":"Function Library","title":"micromobilitykinematics.steeringkinematics","text":"steeringkinematics(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nTo fully describe the kinematics of the steering system, both MOVED and NEUTRAL states must be calculated\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\n\"steering::Steering\": Instance of a steering\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.steeringkinematicsMOVED!-Tuple{Tuple, micromobilitykinematics.Steering, micromobilitykinematics.Suspension}","page":"Function Library","title":"micromobilitykinematics.steeringkinematicsMOVED!","text":"steeringkinematicsMOVED!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nFor the moving rotational component with the angles (θx, θz), the kinematics of the steering is calculated\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.steeringkinematicsNEUTRAL!-Tuple{Tuple, micromobilitykinematics.Steering, micromobilitykinematics.Suspension}","page":"Function Library","title":"micromobilitykinematics.steeringkinematicsNEUTRAL!","text":"steeringkinematicsNEUTRAL!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nFor the rotation component in its rest position with the angles (θx, θz) = (0,0), the kinematics of the steering is calculated\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.suspensionkinematics!-Tuple{micromobilitykinematics.Suspension}","page":"Function Library","title":"micromobilitykinematics.suspensionkinematics!","text":"suspensionkinematics!(suspension::Suspension)\n\nsuspensionkinematicsNEUTRAL!(suspension::Suspension)\n\ncalculates all the movement-dependent positions of the joints in NEUTRAL- and MOVED-Postion\n\n#Arguments: -suspension::Suspension: Suspension of the micromobility vehicle\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.suspensionkinematicsMOVED!-Tuple{micromobilitykinematics.Suspension}","page":"Function Library","title":"micromobilitykinematics.suspensionkinematicsMOVED!","text":"suspensionkinematicsMOVED!(suspension::Suspension)\n\ncalculates all the movement-dependent positions of the joints in MOVED-Position\n\n#Arguments: -suspension::Suspension: Suspension of the micromobility vehicle\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.suspensionkinematicsNEUTRAL!-Tuple{micromobilitykinematics.Suspension}","page":"Function Library","title":"micromobilitykinematics.suspensionkinematicsNEUTRAL!","text":"suspensionkinematicsNEUTRAL!(suspension::Suspension)\n\ncalculates all the movement-dependent positions of the joints in NEUTRAL-Position\n\n#Arguemnts: -suspension::Suspension: Suspension of the micromobility vehicle\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.track_circle_dependency-Tuple{micromobilitykinematics.Steering, micromobilitykinematics.Measurements}","page":"Function Library","title":"micromobilitykinematics.track_circle_dependency","text":"track_circle_dependency(steering::Steering, measurements::Measurements)\n\ncalculates the diffrence of the max. ideal outer wheel angle and the current max. outer wheel angle.\n\n!Instead of calling the kinematics in all conditions, the approach taken here is to use the properties of instantiation!\n\n#Arguments\n\nsteering::Steering: the last state of the steering kinematics\n\n-measurements::Measurements: Instance of a specific all relevant Measurements of the vehicle\n\n#Returns\n\ndependency for the minimal track circle\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.update!-Tuple","page":"Function Library","title":"micromobilitykinematics.update!","text":"update!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nupdates the kinematics of the given steering instance on the new angles and suspension\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns:\n\nno returns because of in place programming\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.update-Union{Tuple{T}, Tuple{Tuple{T, T}, micromobilitykinematics.Steering, micromobilitykinematics.Suspension}} where T<:Real","page":"Function Library","title":"micromobilitykinematics.update","text":"update!(angleConfig::Tuple{T,T}, steering::Steering, suspension::Suspension) where {T<:Real}\n\nupdates the kinematics of the given steering instance on the new angles and suspension\n\n#Arguments -angleConfig::Tuple{T,T}: angles (θx,θz) in which the rotational component is rotated         -θx: Angle of rotation of the rotation component around the x-axis         -θz: Angle of rotation of the rotation component around the z-axis -steering::Steering: Instance of a specific steering -suspension::Suspension: Instance of a specific suspension\n\n#Returns -steering::Steering: Instance of a specific steering\n\n\n\n\n\n","category":"method"},{"location":"library/#micromobilitykinematics.update°!-Tuple{micromobilitykinematics.Steering}","page":"Function Library","title":"micromobilitykinematics.update°!","text":"update°!(steering::Steering)\n\nDetermines the further kinematic calculation and determines the turning angles of the wheels\n\n! function°(): symbolises that this function should only be used within the optimisation ! ! function kinematicsUNTILmountMOVED°! should already be used on the steering instance !\n\n#Arguments -steering::Steering: Instance of a specific steering where the function kinematicsUNTILmount°! was previously called\n\n#Returns:\n\nNo return value due to in-place computation.\n\n\n\n\n\n","category":"method"},{"location":"optimisation problem/#Optimisation-Problem","page":"Optimisation Problem","title":"Optimisation Problem","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"Prior to the optimisation of the components, the formulation of the optimisation problem is a crucial preliminary step. Following the mathematical definition of the optimisation problem, the objective function with associated restrictions is then sought. In essence, the optimisation problem should be formulated in the following manner:","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\begin{array}{ccc}     \\hline     \\textbf{(MP)} & \\textbf{min}  & f(x) \\\n    \\hline      & \\textbf{unter}& gi(x) \\leq 0 \\\n                   & & \\text{für } i = 1, \\ldots, p \\\n    \\hline                    &  &hj(x) = 0 \\\n                   &  &\\text{für } j = 1, \\ldots, m \\\n    \\hline                    &  &x \\in X \\subseteq \\mathbb{R}^n \\\n    \\hline \\end{array} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The following section will examine the potential objective functions, f(x), and conditions that are ultimately employed in the formulation of an optimisation problem.","category":"page"},{"location":"optimisation problem/#Derivation-of-the-target-function","page":"Optimisation Problem","title":"Derivation of the target function","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The optimisation employs the ratio between the distance L of the intersection point C and the wheelbase w of the vehicle. It is assumed that the inner steering angle is identical for both the steering system in use and the Ackermann steering system.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The comparison of a real steering system with the Ackermann steering system depicted in Figure 3.9 yields three distinct scenarios. The optimal configuration is defined by the Ackermann operation, in which both wheel axles of the front wheels intersect on the rear wheel axle. The remaining two scenarios are distinguished by the presence of intersection points C, situated at a distance y from the rear wheel axle. It can be seen that the distance L can be both larger and smaller than the ideal value w. Therefore, the ratio is not a meaningful objective function for optimisation. It is not possible to approximate both sides to the value 1 for a minimisation or maximisation problem. To avoid this issue, the absolute difference of the distances w and L is chosen as the objective function.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The following sections present the derivation and calculation of the distance L, with reference to Figure 3.9.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"(Image: Figure 3.9: Graphical representation of the derivation using the Ackermann condition)","category":"page"},{"location":"optimisation problem/#Calculation-of-the-steering-angle","page":"Optimisation Problem","title":"Calculation of the steering angle","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The calculation of the intersection points C of the wheel axles is essential for the continuous derivation, as these points depend on the steering angles of the inner δi and outer δo wheels. It is already established that the kinematic chain is influenced by the effect of the L-component, whereby characteristic points of the steering geometry are shifted. The steering lever mounted on the wheel is either pulled or pushed by the tie rod, depending on the steering setting, which in turn leads to a change in the wheel suspension. The kinematic model of the steering system already describes the positions of the components with individual steering adjustment options.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"(Image: Figure 3.10: Graphical determination of the steering angle δ)","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"In Figure 3.10, the angles designated as delta represent the angular displacement of the wheel in relation to the initial position of the steering geometry. Given the direct linkage between the steering lever l and the wheel mount M, the transition from position L1 to L2 can also be interpreted as an angular change between the steering levers l_1 and l_2. Consequently, the included angle of the steering lever vectors l_1 and l_2 is to be determined.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\delta = \\arccos\\left(\\frac{\\mathbf{l}1 \\cdot \\mathbf{l}2}{|\\mathbf{l}1| \\cdot |\\mathbf{l}2|}\\right) \\tag{3.13} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"In accordance with the established criteria, the positions of the joints L_1 and L_2, as well as the position of the centre of rotation M, are known solely within the previously defined reference coordinate systems. Consequently, the vectors l_1 and l_2 must initially be determined.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\mathbf{l}1 = \\mathbf{o}M - \\mathbf{o}{L1} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\mathbf{l}2 = \\mathbf{o}M - \\mathbf{o}{L2} $","category":"page"},{"location":"optimisation problem/#Positioning-the-reference-coordinate-system","page":"Optimisation Problem","title":"Positioning the reference coordinate system","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The positioning of the reference coordinate system exerts a more pronounced influence on the determination of the values in the derivation. The dependence of the target function on the Ackermann operation plays a pivotal role in the decision-making process. Consequently, the comparison of distances and angles is of paramount importance, which is why the intersection point Ca of an ideal steering system was selected as the centre of the reference coordinate system. This can be observed graphically in Figure 3.9.","category":"page"},{"location":"optimisation problem/#Transferring-the-axes-to-the-reference-coordinate-system","page":"Optimisation Problem","title":"Transferring the axes to the reference coordinate system","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The axes of the wheels can be described in a coordinate system as a linear function of the following form:","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"i(x) = mi x + bi \\quad  o(x) = mo x + bo  $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"In this equation, the variable \"i\" is used to denote the inner wheel, while \"o\" is used to denote the outer wheel. The gradient m of the functions is derived from the right-angled triangle formed by the x-axis and the wheelbase w. Given the parallelism of the equations y = w and y-axis, there is an alternating angle at the intersection of the x-axis, which is composed of 90° + δ. It can therefore be concluded that the turning angle δo or δi is situated within the triangle of inclination. In Figure 3.9, the alternating angle is highlighted in green and orange. The following applies to the slope of the functions:","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"mi = \\frac{\\Delta yi}{\\Delta xi} = -\\frac{w}{\\frac{w}{\\tan \\deltai}} = -\\frac{1}{\\tan \\deltai}, \\quad mo = \\frac{\\Delta yo}{\\Delta xo} = -\\frac{w}{\\frac{w}{\\tan \\deltao}} = -\\frac{1}{\\tan \\deltao} \\tag{3.14} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"In order to transform the axes into linear functions within the reference coordinate system, it is necessary to ascertain the respective displacements along the y-axis. It should be noted that the intersection point of function i(x) is at the origin, which eliminates the requirement for a shift in this instance. By utilising the known values of the gradient triangle, it is possible to determine the distance of the intersection points of the functions with the x-axis, which subsequently represents the x-coordinate of the position.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"x = \\Delta xo - (\\Delta xi + T) \\tag{3.15} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"Given that the y-value must be zero for an intersection of the x-axis and the positions are known, the constant can be determined as follows:","category":"page"},{"location":"optimisation problem/#Calculation-of-the-intersection-point","page":"Optimisation Problem","title":"Calculation of the intersection point","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The representation of the wheel rotation axes by linear functions facilitates the search for the intersection point C. The determination procedure is based on the equality of the coordinates at this point, which allows for the establishment of the following equation.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\begin{align} i(x) &= o(x) \\\nmi x &= mo x + bo \\\nx (mi - mo) &= bo \\\nx &= \\frac{bo}{mi - m_o}  \\end{align} \\tag{3.17} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The y-value is calculated by inserting the x-coordinate into one of the two linear functions, which are defined by the following equations:","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\begin{align} y &= mo x + bo \\tag{3.18} \\\n  &= -\\frac{1}{\\tan \\deltao} \\cdot \\frac{bo}{mi - mo} + \\left(\\frac{1}{\\tan \\deltao} \\left( \\Delta xo - (\\Delta x_i + T\\right) \\right) \\end{align} $","category":"page"},{"location":"optimisation problem/#Calculation-of-the-distance-L","page":"Optimisation Problem","title":"Calculation of the distance L","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The distance between the front axle and the point of intersection of the wheel axle is represented by the variable L. This variable is constituted by the ideal distance w and the y-coordinate of the aforementioned point of intersection.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"L = w + y \\tag{3.19} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"This function describes the absolute difference between the intersection points, with the ratio of which is ideally 1 or 100.","category":"page"},{"location":"optimisation problem/#Conditions-of-the-optimisation-problem","page":"Optimisation Problem","title":"Conditions of the optimisation problem","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"In order to identify the constraints of the optimisation problem, it is necessary to study critical scenarios and formulate constraints based on their mathematical relationship. Given the increasing complexity resulting from the addition of a further operational area with the use of both steering angles θx and θz, it is more intuitive to adopt a purely planar view of the steering geometry for the time being. Subsequently, the developed solution approaches are transferred to a three-dimensional problem.","category":"page"},{"location":"optimisation problem/#Limits-of-the-optimisation-parameters-and-constants","page":"Optimisation Problem","title":"Limits of the optimisation parameters and constants","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"A cursory examination may lead to the erroneous conclusion that the angle range considered is too narrow. This is related to the prioritisation of the optimisation to ensure stable driving behaviour at higher speeds. Consequently, it is necessary to optimise the steering geometry for the angular range that occurs more frequently at higher speeds. Two constants of the optimisation are directly related to the angular range and together form the limits of the optimisation. The angle tuple (θx, θz) describes the angle setting of the L-component and are elements of the following angle set:","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"{ (\\thetax, \\thetaz) \\mid (\\thetax, \\thetaz) \\in \\mathbb{Z} \\times \\mathbb{Z}, \\ -10 \\leq \\thetax \\leq 10, \\ -35 \\leq \\thetaz \\leq 35 } $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The symmetrical configuration of the steering geometry components allows for the optimisation to be conducted with respect to a single steering direction. Consequently, an angular range can be defined for the optimisation.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"{ (\\thetax, \\thetaz) \\mid (\\thetax, \\thetaz) \\in \\mathbb{Z} \\times \\mathbb{Z}, \\ 0 \\leq \\thetax \\leq 10, \\ 0 \\leq \\thetaz \\leq 35 } \\tag{3.21} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"Another variable is the potential track circle radius (Rs) of a vehicle, which must be maintained throughout a steering movement. Vehicles with comparable dimensions have a track circle radius of between 2000 mm and 3000 mm, which has also been adopted. ","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"In order to prevent potential oversizing of the components, restrictions are imposed on the optimisation parameters. A length range of 10mm to 260mm is specified for the tie rod in order to ensure that the tie rod does not exceed the track length of the vehicle. A tie rod that exceeds the track of the vehicle has the potential to come into contact with the wheel to be steered. Another parameter is the length of the steering lever, which may range from 40 mm to 200 mm. This should prevent undersizing and ensure the existence of a steering lever. It should be noted that the maximum permissible value serves merely as a rough guideline that should not be exceeded. The two rotation radii of the L-component contribute significantly to the steering behaviour, which is why their lengths are also taken into account in optimisation. The limits are chosen to be similar to the steering lever and are between 50mm and 200mm. It is possible that this has already been amended.","category":"page"},{"location":"optimisation problem/#Track-circle-condition","page":"Optimisation Problem","title":"Track circle condition","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The term \"track circle\" is used to describe the circular path of the wheel that is furthest from the centre of rotation in a drive train. In the absence of a defined desired turning circle for the vehicle, the resulting steering geometry will only encompass a portion of the specified range of the turning angle spectrum. The relationship between the steering angle and the toe circle can be derived using the definition of Ackermann steering geometry. If Figure 3.9 depicts the maximum deflection of the front wheel, then the centre of rotation (C_a) of an ideal Ackermann steering system is directly correlated with the smallest possible track circle. In an ideal scenario, the wheel axle intersects the rear wheel axle at the centre of rotation of the vehicle, with their connection corresponding to the track circle radius (r_s). Consequently, the following condition can be formulated:","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\deltao \\geq \\sin^{-1} \\left( \\frac{w}{rs} \\right) \\tag{3.22} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"It is essential that the maximum steering angle of the dimensioned steering geometry is greater than that of the ideal Ackermann steering geometry, which has been adapted to align with the dimensions of the micromobility vehicle.","category":"page"},{"location":"optimisation problem/#Conditional-part-of-the-Ackerman-condition","page":"Optimisation Problem","title":"Conditional part of the Ackerman condition","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The relationship between the inner δi and outer δo angles of incidence of the deflected wheel has already been expressed mathematically by the Ackermann equation (Equation 2.1), whose visual relationship is shown in Figure 2.1. It can be observed from the figure that the inner angle of incidence should be greater than the outer angle of incidence of the wheel at all times. This implies that the following condition must be met for the optimisation to be achieved:","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\deltao \\leq \\deltai \\tag{3.23} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"It is necessary that the current steering angle (delta_i) of the inner wheel be greater than the steering angle $ (\\delta_o)$ of the outer wheel, with the same steering geometry dimensions.","category":"page"},{"location":"optimisation problem/#Interaction-reliability-of-the-components","page":"Optimisation Problem","title":"Interaction reliability of the components","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"Should the dimensions of the tie rod and steering lever prove insufficient, the kinematic chain may be subject to interruption. It is not feasible to ascertain an intersection point between the circular trajectory of the steering lever and the movement domain of the tie rod in this particular instance. It is recommended that Figure 3.8, which illustrates the graphical determination, be consulted once more in order to gain further insight into this connection. If either the radius of the drawbar sphere coloured in purple or the circular path of the steering lever are too short, an interaction of both movements is precluded. The same applies if the drawbar or the steering lever are oversized so that the circular path of the steering lever is enclosed by the drawbar sphere, or if the opposite situation arises. For an intuitive formulation of a restriction of this scenario, the problem is transferred to a two-dimensional system. Figures 3.11, 3.12 and 3.13 illustrate the plane on which the circular path of the steering lever is located, with the section containing the tie rod sphere depicted in purple. Figure 3.11 illustrates the scenarios that must be avoided in order to optimise the tie rod, with the known positions labelled. To ensure interaction, the shortest distance d between the centre of rotation M and the joint P must be smaller than the sum of the radii of both circles. Similarly, the radius of the sphere must not exceed the sum of the shortest distance d and the radius of the steering lever. Both scenarios are colour-coded in the figure, with blue representing the minimum dimensioning and green indicating the maximum dimensioning.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\begin{align} |d| & \\leq |l| + |z| \\\n|d| - (|l| + |z|) & \\leq 0  \\tag{3.24} \\end{align} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\begin{align} |z| & \\leq |d| + |l| \\\n|z| - (|d| + |l|) & \\leq 0 \\tag{3.25} \\end{align} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The dimensioning of the steering lever, whose scenarios are illustrated in Figure 3.13, should be considered in a similar manner. To guarantee that the specified circles can also interact, the aforementioned condition can be immediately implemented. The limitation of the maximum dimensioning is based on a comparable methodology. In the event that the intersection of the spheres is situated within the circle of the pull lever, no interaction is feasible.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\begin{align} |d| & \\leq |l| + |z| \\\n|d| - (|l| + |z|) & \\leq 0 \\tag{3.26} \\\n\\end{align} $ $ \\begin{align} |l| & \\leq |d| + |z| \\\n|l| - (|d| + |z|) & \\leq 0 \\tag{3.27} \\end{align}","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"In light of the subsequent assignment of value ranges to the individual components, the scenario should be disregarded as part of the optimisation process.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"(Image: Figure 3.11: Graphic display if the selected lengths are too small)","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"(Image: Figure 3.12: Graphical representation if the tie rod is too large z)","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"(Image: Figure 3.12: Graphic display if the steering lever is too large l)","category":"page"},{"location":"optimisation problem/#Avoiding-the-singularitys","page":"Optimisation Problem","title":"Avoiding the singularitys","text":"","category":"section"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"Nevertheless, in the event that a component is significantly longer in comparison to the remaining components, a return effect is observed with regard to the steering lever. To elucidate this phenomenon, a visual illustration is provided in Figure 3.14. Let us assume that the dimensions of the steering lever (l) are significantly longer than the radius of the z-rotation (r_z) of the L-component. A stepwise rotation around the origin of the vector rz with the steering angle θz results in a displacement of the positions along their circular paths, which are represented by the green and orange lines in Figure 3.14. If the direction of rotation of the vector r_z is clockwise, an identical rotation of the vector l would be expected due to the kinematic dependency. However, if the angle of rotation is exceeded, the steering lever l moves in the opposite direction to that of the original rotation. The direction of movement is divided into two phases, with the start, turning and end points shown more intensively in their respective colours and their direction of movement illustrated by arrows. For the steering angles of the wheels, this had the consequence that beyond a certain steering angle, the wheel would steer in the opposite direction, which would have serious consequences for the vehicle dynamics.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"(Image: Figure 3.13: Visualisation of the return effect with several steering settings)","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"To obviate this potential outcome, it is imperative to ascertain that the extant dimensioning configuration falls within the permissible range for all conceivable setting orientations. In order to define the singularity of the validity range, it is necessary to use a mathematical expression that will allow the establishment of a limit and, consequently, a comparison criterion. In the event that a setting exceeds the aforementioned singularity, it is evident that the dimensioning is not suitable. By comparing the start, turn and end settings of the example, it is possible to derive the following differentiation criterion. During the adjustment process, the steering angle of the wheel increases by δo until the singularity is exceeded. Consequently, the following condition is formulated.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"$","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"\\deltai < \\deltaj, \\quad i < j, \\quad i, j \\in \\mathbb{Z} \\tag{3.28} $","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"The preceding analysis pertains solely to the examination of a steering geometry aspect, namely the variation of the angle of rotation, which allows the formulation of restrictions. It is also important to assess the opposite side in order to optimise the process. Consequently, the previously defined conditions are checked for their compatibility within the aforementioned scenario. The verification procedure is straightforward visually, as demonstrated by the illustration of the aforementioned scenario for the opposite side of the steering geometry (see Fig. 3.15). As the setting angle increases, the included angle δ of the steering lever l also increases, necessitating the fulfilment of condition 3.28 for the right-hand side of the geometry.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"(Image: Figure 3.14: Visualisation of the singulatiry with several steering settings on the opposite side of the geometry)","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"All previous scenarios of this condition have been represented exclusively in two-dimensional space. Consequently, any differences in position and their effects on the movement of the angle must be subjected to analysis. In order to achieve this, the principal elements of the scenario depicted in Figure 3.14 are projected onto the y-z plane. As a result of the inclined plane of rotation of the steering lever, there is a height differential between the joints; however, this has no impact on the vectorial determination of the angle δi and δo.","category":"page"},{"location":"optimisation problem/","page":"Optimisation Problem","title":"Optimisation Problem","text":"(Image: Figure 3.14: Projection of the main points of the scenario onto the y-z plane)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Introduction","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":" \nDocumentation (Image: Build Docs) (Image: Dev Docs)","category":"page"},{"location":"#What-is-micromobilitykinematics.jl?","page":"Introduction","title":"What is micromobilitykinematics.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The fundamental operations of the micromobilitykinematics.jl library serve as the foundation for kinematic calculations and updates to a self-developed steering geometry of a micromobility vehicle. ","category":"page"},{"location":"#Core-Function","page":"Introduction","title":"Core Function","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The functions include those for calculating the steering and suspension kinematics in both the neutral and moving state.All important information on the state of the vehicle at a specific steering setting can then be read from the instance. For example, the library offers the possibility to read the steering angles of the inner and outer wheels as well as important joint positions and dimensions of components. In addition, all attributes of the instance can be exported to an XML file. This facilitates, for example, the immediate transfer of the steering geometry to CAD programmes, which can be updated using the calculation.","category":"page"},{"location":"#Optimization","page":"Introduction","title":"Optimization","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Furthermore, the steering geometry can be modified by altering the parameter values in order to optimise it if necessary. The optimisation is primarily based on the JuMP.jl package and utilises the Ipopt algorithm. The accuracy of the steering, along with other pivotal properties, can be depicted in plots to illustrate the resulting characteristics. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Collectively, these tools provide a robust framework for analysing and simulating this mechanical system. ","category":"page"},{"location":"#How-can-I-use-micromobilitykinematics.jl?","page":"Introduction","title":"How can I use micromobilitykinematics.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The code presented here is intended for illustrative purposes only. The accompanying documentation provides illustrative examples of potential applications, which offer a more comprehensive understanding of the package's functionality.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"\n# initialisation of the steering\nx_rotational_radius = 56\nz_rotational_radius = 165\ntrack_lever_length = 185\ntie_rod_length = 210\nsteering = Steering(x_rotational_radius, z_rotational_radius, track_lever_length, tie_rod_length)\n\n# initialisation of the suspension\ncompression = 30 # neutral damper positioning\nsuspension = Suspension(compression)\n\n\n# steering setting\nangleConfig = (0,10)\n\nsuspensionkinematics!(suspension)\nsteeringkinematics!(angleConfig, steering, suspension)\n\n# new steering setting \nnew_angleConfig = (0,25)\n\n# update steering kinematics \nupdate!(new_angleConfig, steering, suspension)\n\n# exports xml list to path = @__DIR__ (default)\nexportXML(steering)\nexportXML(suspension)","category":"page"},{"location":"#How-is-micromobilitykinematics.jl-structured?","page":"Introduction","title":"How is micromobilitykinematics.jl structured?","text":"","category":"section"},{"location":"examples/changing_steering_position/#First-Steps","page":"Changing steering position","title":"First Steps","text":"","category":"section"},{"location":"examples/changing_steering_position/#1.-Initialisation","page":"Changing steering position","title":"1. Initialisation","text":"","category":"section"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"The initial stage of the process is to initialise all of the requisite sub-subsystems of the vehicle that directly influence the behaviour of the steering mechanism. ","category":"page"},{"location":"examples/changing_steering_position/#Steering","page":"Changing steering position","title":"Steering","text":"","category":"section"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"The initial step is to commence the configuration of the steering geometry, which entails defining the dimensions of the constituent components. The dimensions exert a direct impact on the kinematic characteristics of the steering mechanism. To gain a more comprehensive grasp of the steering geometry, it is recommended to consult the accompanying documentation, which provides a comprehensive and detailed account of the subject matter.","category":"page"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"It is recommended that a random search or direct selection of functioning parameters be employed, given that not all parameter values will necessarily result in the desired functioning kinematics.","category":"page"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"The steering class itself includes all the important joint positions and component dimensions. This allows different steering positions to be identified and compared.","category":"page"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"# random search, with the following argument\nlower_bourder = (50.0, 50.0, 70.0, 195.0)\nupper_bourder = (100.0, 200.0, 200.0, 260.0)\nmax_angleConfig = (10,35)\n\nparam = random_search(upper_bourder, lower_bourder, max_angleConfig)\n\n# Initialisation of the steering, with the following argument\nx_rotational_radius = param[1]\nz_rotational_radius = param[2]\ntrack_lever_length = param[3]\ntie_rod_length = param[4]\n\nsteering = Steering(x_rotational_radius, z_rotational_radius, track_lever_length, tie_rod_length)","category":"page"},{"location":"examples/changing_steering_position/#Suspension","page":"Changing steering position","title":"Suspension","text":"","category":"section"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"The compression of the damper also exerts an influence on the steering geometry, as it alters the direct positioning of the essential joints. ","category":"page"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"# Initialisation of the suspension, with the following argument\ncompression = 30 # neutral damper positioning\n\nsuspension = Suspension(compression)","category":"page"},{"location":"examples/changing_steering_position/#Chassis","page":"Changing steering position","title":"Chassis","text":"","category":"section"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"The chassis class includes the fundamental dimensions of the vehicle's chassis. These parameters are instrumental in calculating kinematic variables.","category":"page"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"# Initialisation of the Chassi\nchassi = Chassi()","category":"page"},{"location":"examples/changing_steering_position/#2.-Calculation-of-the-kinematics","page":"Changing steering position","title":"2. Calculation of the kinematics","text":"","category":"section"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"Once the individual components have been initialised, the steering geometry can be calculated depending on a steering setting angelConfig. However, prior to this, the kinematics of the suspension must be calculated, as this has a direct influence on the subsequent calculation by changing the positions of the wishbones.","category":"page"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"# steering setting\nangleConfig = (0,10)\n\nsuspensionkinematics!(suspension)\nsteeringkinematics!(angleConfig, steering, suspension)\n","category":"page"},{"location":"examples/changing_steering_position/#3.-Updating-the-steering-geometry-positioning","page":"Changing steering position","title":"3. Updating the steering geometry positioning","text":"","category":"section"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"Updating of steering geometry positioning by change in steering angle","category":"page"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"# new steering setting \nnew_angleConfig = (0,25)\n\nupdate!(new_angleConfig, steering, suspension)","category":"page"},{"location":"examples/changing_steering_position/#4.-Export","page":"Changing steering position","title":"4. Export","text":"","category":"section"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"Furthermore, XML parameter lists can be exported for each component, which contain the most salient kinematic movement points as well as other properties of the steering geometry components. It is also relevant to consider properties such as the resulting wheel angle in this context.","category":"page"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"One potential application is the updating of a computer-aided design (CAD) model of the steering geometry at various positions.","category":"page"},{"location":"examples/changing_steering_position/","page":"Changing steering position","title":"Changing steering position","text":"# exports xml list to path = @__DIR__ (default)\nexportXML(steering)\nexportXML(suspension)\n","category":"page"}]
}
